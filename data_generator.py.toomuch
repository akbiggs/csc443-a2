import csv

from json import load
from random import choice, uniform, gauss
from string import ascii_lowercase, digits
from sys import argv, exit


'''
You should implement this script to generate test data for your
merge sort program.

The schema definition should be separate from the data generation
code. See example schema file `schema_example.json`.
'''


def generate_data(schema, out_file, nrecords):
    '''
    Generate data according to the `schema` given,
    and write to `out_file`.
    `schema` is an list of dictionaries in the form of:
    [
        {
            'name' : <attribute_name>,
            'length' : <fixed_length>,
            ...
        },
        ...
    ]
    `out_file` is the name of the output file.
    The output file must be in csv format, with a new line
    character at the end of every record.
    '''
    print "Generating {} records".format(nrecords)
    with open(out_file, 'w') as records_file:
        csv_writer = csv.writer(records_file)
        for i in range(nrecords):
            csv_writer.writerow(generate_record(schema))


def generate_record(schema):
    record = []
    for col in schema:
        distribution = col.get('distribution')
        if distribution:
            if distribution.get('name') == 'uniform':
                record.append(
                    str(
                        int(uniform(distribution.get('min'), distribution.get('max')))
                    )
                )
            elif distribution.get('name') == 'normal':
                record.append(
                    str(
                        round(gauss(mu=distribution.get('mu'), sigma=distribution.get('sigma')), 2)
                    )
                )
        else:
            if col.get('name') == 'student_number':
                alphabet = digits
                length = col.get('length')
                pre = ''
            elif col.get('name') == 'account_name':
                alphabet = ascii_lowercase
                length = col.get('length') - 2
                pre = choice(['c1', 'c2', 'g1', 'g2', 't1', 't2'])
            record.append(
                pre + ''.join(
                    choice(alphabet) for _ in range(length)
                )
            )
    print 'creating record: {}'.format(','.join(record))
    return record


if __name__ == '__main__':
    if not len(argv) == 4:
        print "data_generator.py <schema json file> <output csv file> <# of records>"
        exit(2)

    schema = load(open(argv[1]))
    output = argv[2]
    nrecords = int(argv[3])
    print schema

    generate_data(schema, output, nrecords)
